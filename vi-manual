*************************************************
간혹 윈도우의 습관으로 ctrl + z를 누르는데 이는 현제 작업을 일시중지하고 터미널로 돌아가는 것으로 !bash와 유사한 효과가 있다.
이때 당황하지 말고 fg를 입력하여 돌아오면 된다 
*************************************************
미리 알고 보면 좋을 내용
커서를 이동할 때 위는 j 아래는 k를 사용하는데
일부 명령어에 j와 k를 조합하는 형태로 작업하기도 한다.
이때 명령 전에 숫자를 누르면 이후 몇 줄까지 작업이 진행된다.
ex) 4j는 4줄 아래로 이동 
*************************************************

모든 명령은 esc를 눌러 명령 모드일 때 사용 가능
명령 모드는 문서를 에디트 할 수 있는 명령을 사용가능
:는 ex 모드로 ex명령어 (저장, 나가기 등)를 사용 가능

#vi 에디터 종료하기
:w	현재 변경사항 저장
:wq 	현재 변경사항 저장 후 나가기
:q!	저장하지 않고 나가기
:q	나가기 (변경사항이 있다면 나가지지 않음)
:!bash	편집상태를 그대로 두고 bash 쉘 실행. 재진입 사려면 exit후 엔터
ZZ	현재 변경사항 저장 후 나가기
:wq 파일이름	현재 변경사항을 다른 이름으로 저장 후 나가기

#커서 이동하기 (방향키(화살표) 사용가능)
h	왼쪽으로 1space 이동
j	아래줄로 이동
k	윗줄로 이동
l	오른쪽으로 1space 이동

#위치 이동하기
w,W	다음 단어의 첫 글자로 이동
b,B	이전 단어의 첫 글자로 이동
e,E	단어의 마지막 글자로 이동
^,0	줄 맨 앞으로 이동
$	줄 맨 뒤로 이동
+	다음줄 첫글자로 이동 
-	윗줄 첫글자로 이동
(	이전 문장의 첫 글자로 이동
)	다음 문장의 첫 글자로 이동
{	다음 문단으로 이동
}	다음 문단으로 이동
gg	문서의 처음으로 이동
G	문서 끝으로 이동
4G	4번째 줄로 이동

소문자와 대문자 이동의 차이는 I'm a member of "KULS"에서 사용해보면 
소문자는 I/'/m/a/memver/of/"/KULS/"로 인식하고
대문자는 I'm/a/memver/of/"KULS"로 인식한다.
소괄호와 중괄호는 빈 줄으 인식여부이다.
1G를 입력하여 문서 처음으로 간 다음 소괄호와 줄괄호로 현제 위치까지 와볼것

#입력모드로 전환 후 글자 입력하기
i       현제 커서 위치
I       현재 커서 줄 맨앞 위치
a       현재 커서 바로 뒤 위치
A       현재 커서 줄 맨뒤 위치
o       현재 커서 줄 뒤에 한 줄 추가    
O       현재 커서 줄을 뒤로 밀고 한 줄 추가

#수정
s,cl	현재 커서의 글자를 지우고 입력
r	현재 커서의 한 글자를 교체
R	현재 커서 위치에서 ESC를 누를때 까지 다른글자로 교체
cc	현재 커서가 있는 줄을 교체
cj	커서가 있는 줄과 그 다음 줄을 교체
ck	커서가 있는 줄과 그 전 줄을 교체 

#지우기
x, dl	커서 위치의 글자 삭제
X, dh	커수 위치 앞의 글자 삭제
dw,dW	한 단어 삭제 (대문자는 이동때와 같음)
d0	커서부터 줄의 처음까지 삭제
D,d$	커서부터 줄의 끝까지 삭제
dd	커서가 있는 줄을 삭제
4dd	커서가 있는 줄부터 4줄 삭제
dj	커서가 있는 줄과 그 다음 줄 삭제
4dj	커서가 있는 줄과 그 다음 4줄 삭제 (5줄)
dk	커서가 있는 줄과 그 이전 줄 삭제
4dk	커서아 있는 줄과 그 이전 4줄 삭제 (5줄)

#복사하기
yw	커서 위치부터 단어의 끝까지 복사
y0	커서의 위치부터 줄의 처음까지 복사
y$	커서의 위치부터 줄의 끝까지 복사
yy	커서가 있는 줄을 복사
4yy	커서가 있는 줄부터 4줄 복사
yj	커서가 있는 줄과 그 다음 줄을 복사
4yj	커서가 있는 줄과 그 다음 4줄을 복사 5줄)
yk	커서가 있는 줄과 그 이전 줄을 복사
4yk	커서가 있는 줄과 그 이전 4줄을 복사 (5줄)

#붙여넣기
p	커서의 다음 위치에 붙여넣기
P	커서가 있는 위치에 붙여넣기

#기타
u	한 단계 되돌리기 (ctrl+z 와 유사)
U	그 줄에 행해진 모든 작업 취소
ctrl+r	작업 재실행
.	조금 전에 한 작업 반복
~	대문자를 소문자로, 소문자를 대문자로 변경
%	괄호의 반대 짝으로 이동
ctrl+l	현재 화면을 지우고 다시 그림
ctrl+g	현재 파일에 관한 정보를 표시
J	현재 줄과 아래 줄을 연결
>	탭추가
5>>	현재 커서가 위치한 줄을 재외한 밑으로 5줄에 탭 추가

#파일 내 검색하기
/단어	문서 내에서 단어를 찾아 아래로 이동
?단어	문서 내에서 단어를 찾아 위로 이동
n	(검색중) 다음 일치하는 항목으로 이동
N	(검색중) 이전 일치하는 항목으로 이동
검색이 문서 끝에 도달하면 다시 처음으로 돌아간다 해당 옵션을
:set nows	로 끌 수 있으며
:set ws		로 켤 수 있다.

고급 검색
^	줄의 처음을 나타낸다
$	줄의 끝을 나타낸다
.	아무 글자나 한 글자를 나타낸다
[...]	[과]사이에 있는 글자 중 하나
*	*앞의 내용이 0번 이상 반복됨
\{min,max\}	min이상 max이하의 횟수만큼 반복됨

예를들어 줄에서 첫번째 단어로 등장하는 linux를 검색하고 싶다면
/^linux<CR>

만약 3~5자리 로 이루어진 모든 숫자를 검색하고 싶다면
/[0,1,2,3,4,5,6,7,8,9]\{3,5\}<CR> 또는 /[0-9]\{3,5\}<CR>

#파일 내 문자 치환
:%s/단어/다른단어/ig	문서 내에서 단어를 찾아 다른단어로 변경.
%	는 문서 전체, 안쓰면 현재 문장, 1,20은 1~20번째 줄, -2,+4는 2줄 위부터 4줄 아래까지
i	는 대소문자 구분한함
g	는 줄 내 모두 변경, 안쓰면 한 문장에 여러번 등장하더라도 첫 단어만 변경
:g/pattern/s/단어/다른단어/g	문서내에서 pattern이 있는 모든 줄의 단어를 다른 단어로 변경

만약 ab로 시작하는 소문자로 되어있는 모든 단어를 삭제하려면
:%s/ab[a-z]*//g<CR>
설명하자면 ab뒤에, a~z중 하나를 n번(*) 즉 뒤에 무었이 있건, '없음'으로 치환. g가 있으므로 문장내에서 반복, i가 없으므로 대소문사 구분 없이 실행

#화면 이동
H	커서를 화면의 맨 위로
z<CR>	현재 줄을 화면 맨 위로, <CR>은 엔터입력
N	커서를 화면의 중앙으로
z.	현재 줄을 화면의 중앙으로
L	커서를 화면의 맨 아래로
z-	현재 줄을 화면의 맨 아래로
4H	커서를 위에서 4번째 줄로 이동
4L	커서를 아래에서 4번째 줄로 이동
ctrl+u	반 화면 위로 스크롤
ctrl+b	한 화면 위로 스크롤
ctrl+d	반 화면 아래로 스크롤
ctrl+f	한 화면 아래로 스크롤
gg, lG	문서의 처음으로 이동
G	문서의 마지막으로 이동
4G	문서의 4번째 줄로 이동
:set number<CR> 또는 :set nu<CR>	화면 왼쪽에 줄 번호 표시
:set nonumber<CR> 또는 :set nonu<CR>	중 번호 표시 삭제

#마킹 (북마크)
ma	현재 위치를 `a로 마크
`a	마크된 `a로 이동
'a	마크된 `a가 있는줄의 처음으로 이동
``	직전의 커서 위치로 이동
''	진전의 커서가 위치하던 줄의 처음으로 이동


#버퍼의 이용
vi는 9개의 버퍼를 삭제 복사 교체한 글은 1번 버퍼에 저장되며 이후 작업에 따라뒤로 밀린다.
붙여넣기 할 때 "4p를 하면 4번째 버퍼에 저장된 문장을 붙여넣기 한다.

위의 9개 이외에도 a~z까지 26개의 버퍼를 제공한다(마커와 다르다고한다)
즉 "a3yy로 `a'버퍼에 3줄을 복사 저장하며 "ap로 붙여넣기 할 수 있다.
또한 "b4D로 4줄을 삭제하면서 `b'버퍼에 저장 할 수 있다

#ex명령 모드
이전에 간단한 저장 종료는 배웠지만 좀 더 추가하면
:q	vi를 종료
:w	현재 문서를 저장
:w [file]	현재 문서를 [file]로 저장
:w >> [file]	현재 문서를 [file]에 덧붙여 저장
:e [file]	[file]을 불러옴
:e#	이전에 편집하던 파일을 불러옴
:e%	현재 파일을 다시 불러옴 (저장하지 않은 작업은 취소)
:r [file]	커서 위치에 [file]을 끼워넣기
:set [option]	[option] 켜기
:set [nooption]	[option] 끄기
:! [command]	[command] 실행
:r ![command]	[command] 실행 결과를 끼워넣기

예를들어 :r !date<CR> 을 입력하면 현재 커서 위치에 날짜와 시간을 삽입
:r !sort phone<CR>은 phone라는 파일을 정령하여 삽입

#고급 응용
새로 문서를 작성하려면
:e newfile<CR>

#상용구 사용
:ab test 상용구 테스트 중입니다<CR>을 입력하고 다음줄에 test를 입력해보자
별일 안일어나면 test를 입력하고 스페이스바나 엔터를 입력한다
상용구 해제는 :unab test<CR> 이다
등록된 상용구 리스트는 :ab<CR>을 통해 확인 가능하며
여러 줄을 상용구로 지정하고 싶다면
:ab test2 여러줄을 상용구로^M만드는 중입니다.<CR>을 입력해서 확인해보자
^M은 ctrl+v를 누른 후 ctrl+m을 눌러 입력한다.

#매크로 사용
q       매크로 녹화 시작
[key]   매크로를 저장할 [key]
~       매크로 저장할 작업을 실행
q       매크로 녹화 종료
@[key]  [key]에 저장된 매크로 실행
4@[key] [key]에 저장된 매크로 4회 실행 
@@      이전의 매크로를 실행

매크로 실습
명령 모드에서 qa를 누르면 하단에 recording이라고 뜬다.
이때 작업을 실행 후 명령모드에서 q를 입력한다.   
예를들어 qa를 입력한 뒤 다음 줄의 1에서 ctrl+a를 입력 후 q를 입력한다.
13
윗줄의 1에 @a와 100@a를 입력해본다. 이번엔 w에 10@a를 저장해 실행해본다.
매크로를 재귀적으로 사용하는건 가능하다 원래의 매크로를 절대 변형해서는 안된다.

매크로 저장
~/.virmc 파일 혹은 /etc/vimrc를 연다. insert모드에서
let @a='
까지 입력 후 inset모드에서 ctrl+r, ctrl+r, a를 입력하면 a에 저장된 매크로가 입력된다. 
'를 입력하여 마무리 한 뒤 저장하고 나간다.
~/은 해당 사용자, /etc/는 모든 사용사 한테 적용된다.

#vi설정
vi의 설정 파일은 /etc/vimrc 파일과  ~/.vimrc 파일이다. 만약 GUI 버전의 vi를 사용한다면 /etc/gvimrc 파일과 .gvimrc파일로 설정할 수 있다.
아래의 문장들을 전부 복사하여  적용하고자 하는 위치에 저장한다.

set autoindent      " 자동으로 들여쓰기를 한다.
set cindent         " C 프로그래밍을 할때 자동으로 들여쓰기를 한다.
set smartindent     " 좀더 똑똑한 들여쓰기를 위한 옵션이다.
set textwidth=79    " 만약 79번째 글자를 넘어가면 \
set wrap            " 자동으로 <CR>를 삽입하여 다음 줄로 넘어간다.
set nowrapscan      " 검색할 때 문서의 끝에서 다시 처음으로 돌아가지 않는다.
set nobackup        " 백업 파일을 만들지 않는다.
set visualbell      " 키를 잘못눌렀을 때 삑 소리를 내는 대신 번쩍이게 한다.
set ruler           " 화면 우측 하단에 현재 커서의 위치(줄,칸)를 보여준다.
set tabstop=4       " Tab을 눌렀을 때 8칸 대신 4칸 이동하도록 한다.
set shiftwidth=4    " 자동 들여쓰기를 할때 4칸 들여쓰도록 한다.

" 아래는 한글을 제대로 처리하기 위해 필요하다.
if $LANG[0] == `k' && $LANG[1] == `o'
  set fileencoding=korea
endif

"터미널이 xterm-debian 혹은 xterm-xfree86일 경우 컬러를 사용한다.
if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
  set t_Co=16
  set t_Sf=^[[3%dm
  set t_Sb=^[[4%dm
  set t_kb=^H
  fixdel
endif

"문법 강조 기능을 사용한다.
if has("syntax")
  syntax on           " Default to no syntax highlightning 
endif
